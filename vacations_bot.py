from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import datetime
import json
import os
import re

DATA_FILE = 'vacations.json'


def load_data() -> dict:
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_data(data: dict) -> None:
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def escape_markdown(text: str) -> str:
    return re.sub(r'([_\*\[\]\(\)\~\`\>\#\+\-\=\|\{\}\.\!])', r'\\\1', text)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "üõ´ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –•–æ—á–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫ –∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å? "
        "–í–≤–µ–¥–∏—Ç–µ <code>/otpusk YYYY-MM-DD –î–ù–ò</code>, "
        "–Ω–∞–ø—Ä–∏–º–µ—Ä <code>/otpusk 2025-08-01 10</code> ‚Äî –∏ –≤–ø–µ—Ä–µ–¥, –Ω–∞–≤—Å—Ç—Ä–µ—á—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üå¥",
        parse_mode=ParseMode.HTML
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—É—Å–∫–Ω–æ–º—É –±–æ—Ç—É:</b>\n\n"
        "1Ô∏è‚É£ <code>/otpusk YYYY-MM-DD –î–ù–ò</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–ø—É—Å–∫.\n"
        "2Ô∏è‚É£ <code>/myvacation</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—Ç–ø—É—Å–∫–∞.\n"
        "3Ô∏è‚É£ <code>/delvacation YYYY-MM-DD</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—É—Å–∫.\n"
        "4Ô∏è‚É£ <code>/allvacations</code> ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—É—Å–∫–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! üòä"
    )
    await update.effective_message.reply_text(
        text,
        parse_mode=ParseMode.HTML
    )


async def set_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message
    if len(context.args) < 2:
        await msg.reply_text(
            "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: <code>/otpusk YYYY-MM-DD –î–ù–ò</code>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.",
            parse_mode=ParseMode.HTML
        )
        return

    date_str, length_str = context.args[0], context.args[1]

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    try:
        start_date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        await msg.reply_text(
            "‚ùó –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>2025-08-01</code>.",
            parse_mode=ParseMode.HTML
        )
        return

    if start_date.year > 2099:
        await msg.reply_text(
            "üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫ –¥–∞–ª—å—à–µ 2099 –≥–æ–¥–∞ ‚Äî —Å–ª–∏—à–∫–æ–º —Å–º–µ–ª–æ, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ—â–µ.",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏–Ω—ã –æ—Ç–ø—É—Å–∫–∞
    try:
        length = int(length_str)
        if length < 1 or length > 365:
            raise ValueError
    except ValueError:
        await msg.reply_text(
            "‚ùó –î–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 365. –ü—Ä–æ–≤–µ—Ä—å –≤–≤–æ–¥.",
            parse_mode=ParseMode.HTML
        )
        return

    today = datetime.date.today()
    if start_date <= today:
        await msg.reply_text(
            "‚è∞ –û—Ç–ø—É—Å–∫ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–≤—Ç—Ä–∞.",
            parse_mode=ParseMode.HTML
        )
        return

    user = update.effective_user
    chat = update.effective_chat
    data = load_data()
    uid = str(user.id)

    if uid not in data:
        data[uid] = {
            "vacations": [],
            "chat_id": chat.id,
            "username": user.username or user.first_name
        }
    else:
        data[uid]["chat_id"] = chat.id
        data[uid].setdefault("vacations", [])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
    if any(v["start"] == start_date.isoformat() for v in data[uid]["vacations"]):
        await msg.reply_text(
            "‚úÖ –¢—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª –æ—Ç–ø—É—Å–∫ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.",
            parse_mode=ParseMode.HTML
        )
        return

    data[uid]["vacations"].append({
        "start": start_date.isoformat(),
        "length": length
    })
    data[uid]["vacations"].sort(key=lambda v: v["start"])
    save_data(data)

    await msg.reply_text(
        f"üéâ –£—Ä–∞! –û—Ç–ø—É—Å–∫ —Å {start_date} –Ω–∞ {length} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
        parse_mode=ParseMode.HTML
    )


async def my_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    msg = update.effective_message
    data = load_data()
    vacs = data.get(str(user.id), {}).get("vacations", [])

    if not vacs:
        await msg.reply_text(
            "ü§∑ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–ø—É—Å–∫–æ–≤.",
            parse_mode=ParseMode.HTML
        )
        return

    today = datetime.date.today()
    response = f"‚úàÔ∏è –í–∞—à–∏ –æ—Ç–ø—É—Å–∫–∞, @{user.username or user.first_name}:\n"
    for v in vacs:
        start = datetime.datetime.strptime(v["start"], '%Y-%m-%d').date()
        length = int(v["length"])
        end = start + datetime.timedelta(days=length - 1)

        if start > today:
            days_to = (start - today).days
            response += f"‚Ä¢ –ù–∞—á–∞–ª–æ: {start} (—á–µ—Ä–µ–∑ {days_to} –¥–Ω.), –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {length} –¥–Ω.\n"
        elif start <= today <= end:
            days_left = (end - today).days + 1
            response += f"‚Ä¢ –°–µ–π—á–∞—Å –≤ –æ—Ç–ø—É—Å–∫–µ: –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω. (—Å {start} –ø–æ {end}).\n"
        else:
            response += f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω –æ—Ç–ø—É—Å–∫ —Å {start} –ø–æ {end}.\n"

    await msg.reply_text(response, parse_mode=ParseMode.HTML)


async def delete_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.effective_message

    if not context.args:
        await msg.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è: <code>/delvacation YYYY-MM-DD</code>.",
            parse_mode=ParseMode.HTML
        )
        return

    try:
        date_iso = datetime.datetime.strptime(context.args[0], '%Y-%m-%d').date().isoformat()
    except ValueError:
        await msg.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: YYYY-MM-DD, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>2025-08-01</code>.",
            parse_mode=ParseMode.HTML
        )
        return

    data = load_data()
    uid = str(update.effective_user.id)
    vacs = data.get(uid, {}).get("vacations", [])
    new_list = [v for v in vacs if v["start"] != date_iso]

    if len(new_list) == len(vacs):
        await msg.reply_text(
            "üîç –û—Ç–ø—É—Å–∫ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        return

    data[uid]["vacations"] = new_list
    save_data(data)
    await msg.reply_text(
        f"‚úÖ –û—Ç–ø—É—Å–∫ <code>{date_iso}</code> —É–¥–∞–ª—ë–Ω.",
        parse_mode=ParseMode.HTML
    )


async def all_vacations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat = update.effective_chat
    msg = update.effective_message
    data = load_data()
    today = datetime.date.today()
    users = []

    for uid, info in data.items():
        if info.get("chat_id") != chat.id:
            continue
        for v in info.get("vacations", []):
            start = datetime.datetime.strptime(v["start"], '%Y-%m-%d').date()
            length = int(v["length"])
            end = start + datetime.timedelta(days=length - 1)
            if end < today:
                continue
            days_to = (start - today).days
            users.append((info.get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"), days_to, start, length))

    if not users:
        await msg.reply_text(
            "ü§∑ –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –æ—Ç–ø—É—Å–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            parse_mode=ParseMode.HTML
        )
        return

    users.sort(key=lambda x: x[1])
    response = "üèñÔ∏è –ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—É—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
    for name, days_to, start, length in users:
        if days_to > 0:
            response += f"‚Ä¢ {name}: —á–µ—Ä–µ–∑ {days_to} –¥–Ω., —Å—Ç–∞—Ä—Ç {start}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {length} –¥–Ω.\n"
        else:
            response += f"‚Ä¢ {name}: —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞—Ä—Ç—É–µ—Ç –æ—Ç–ø—É—Å–∫! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {length} –¥–Ω.\n"

    await msg.reply_text(response, parse_mode=ParseMode.HTML)


async def vacation_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    data = load_data()
    today = datetime.date.today()
    updated = {}

    for uid, info in data.items():
        chat_id = info.get("chat_id")
        name = info.get("username", "–¥—Ä—É–≥")
        valid = []
        for v in info.get("vacations", []):
            start = datetime.datetime.strptime(v["start"], '%Y-%m-%d').date()
            length = int(v["length"])
            end = start + datetime.timedelta(days=length - 1)

            if (start - today).days == 7:
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=(
                            f"üîî –ü—Ä–∏–≤–µ—Ç, {name}! –ß–µ—Ä–µ–∑ 7 –¥–Ω–µ–π —É —Ç–µ–±—è –æ—Ç–ø—É—Å–∫ "
                            f"—Å {start} –Ω–∞ {length} –¥–Ω. –ù–µ –∑–∞–±—É–¥—å —Å–æ–±—Ä–∞—Ç—å —á–µ–º–æ–¥–∞–Ω!"
                        ),
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            if end >= today:
                valid.append(v)

        if valid:
            info["vacations"] = valid
            updated[uid] = info

    save_data(updated)


async def on_startup(app):
    commands = [
        BotCommand("start",       "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —É–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"),
        BotCommand("help",        "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand("otpusk",      "–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—É—Å–∫: /otpusk YYYY-MM-DD –î–ù–ò"),
        BotCommand("myvacation",  "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –æ—Ç–ø—É—Å–∫–∞"),
        BotCommand("delvacation", "–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—É—Å–∫: /delvacation YYYY-MM-DD"),
        BotCommand("allvacations","–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ø—É—Å–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
    ]
    await app.bot.set_my_commands(commands)


def main() -> None:
    TOKEN = 'token'
    builder = ApplicationBuilder().token(TOKEN)
    builder.post_init(on_startup)
    app = builder.build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("otpusk", set_vacation))
    app.add_handler(CommandHandler("myvacation", my_vacation))
    app.add_handler(CommandHandler("delvacation", delete_vacation))
    app.add_handler(CommandHandler("allvacations", all_vacations))

    app.job_queue.run_repeating(
        callback=vacation_reminder,
        interval=86400,
        first=0
    )

    app.run_polling()


if __name__ == '__main__':
    main()
